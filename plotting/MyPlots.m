classdef MyPlots
    %UNTITLED Summary of this class goes here
    %   Detailed explanation goes here
    
    properties (Constant)
        cCV=[0.8,0.5,0];
        cTrain=[0,0.2,0.8];
        cTest=[0.8,0.0,0];
    end
    
    methods (Static)
        function out=perfover(ntrain,precisionV,recallV,f1V,xlab,name)
            global ppath;
            fig=figure;
            plot(ntrain,[precisionV;recallV;f1V]);
            legend('precision (val.)','recall (val.)','f_1 (val.)','Location','SouthEast');
            xlimMin(0);ylim([0,1]);
            xlabel(xlab);
            ylabel('performance');
            out=fullfile(ppath,'figures',name);
            ConvertPlot4Publication(out);
        end
        function out=perfoverne(ntrain,precisionV,recallV,f1V)
            out=MyPlots.perfover(ntrain,precisionV,recallV,f1V,'number of training samples','perfovernts');
        end
        function out=perfovernf(ntrain,precisionV,recallV,f1V)
            out=MyPlots.perfover(ntrain,precisionV,recallV,f1V,'number of cues','perfovernfs');
        end
        %set(findall(figOts,'type','text'),'fontSize',20,'fontWeight','bold')
        %set(gca,'FontSize',20,'fontWeight','bold')
        function out=infovernf(ntrain,infoV,infoT)
            out=MyPlots.infovern(ntrain,infoV,infoT,'features');
        end
        function out=infoverne(ntrain,infoV,infoT)
            out=MyPlots.infovern(ntrain,infoV,infoT,'training examples');
        end
        function out=infovernc(ntrain,infoV,infoT)
            out=MyPlots.infovern(ntrain,infoV,infoT,'cues');
        end
        function out=infovernl(ntrain,infoV,infoT)
            out=MyPlots.infovern(ntrain,infoV,infoT,'samples per leaf');
        end
        function out=infovern(ntrain,infoV,infoT,name)
            global ppath;
            fig=figure;
            
            hEV     = errorbar(ntrain, mean(infoV,1), std(infoV,1,1));
            hold on; hold all;
            hET     = errorbar(ntrain, mean(infoT,1), std(infoT,1,1));
            
            set(hEV                             , ...
                'LineStyle'       , 'none'      , ...
                'Marker'          , '.'         ,...
                'LineWidth'       , 1           , ...
                'Color'           , MyPlots.cCV          ,...
                'Marker'          , 'o'         , ...
                'MarkerSize'      , 6           , ...
                'MarkerEdgeColor' , MyPlots.cCV  , ...
                'MarkerFaceColor' , MyPlots.cCV ...
                );
            
            set(hET                             , ...
                'LineStyle'       , 'none'      , ...
                'Marker'          , '.'         ,...
                'LineWidth'       , 1           , ...
                'Color'           , MyPlots.cTrain          ,...
                'Marker'          , 's'         , ...
                'MarkerSize'      , 6           , ...
                'MarkerEdgeColor' , MyPlots.cTrain          , ...
                'MarkerFaceColor' , MyPlots.cTrain  ...
                );
            set(gca,...
                'YMinorTick'  , 'on' ,     ...
                'XMinorTick'  , 'on'  ...,    ...
                ... 'XScale','log'...
                );
            % set(gca,'XTick',[1 10 100 1000]);
            MyPlots.adjusterrorbarwidth(hET,0.02);
            MyPlots.adjusterrorbarwidth(hEV,0.02);
            legend('validation','training','Location','SouthEast');
            ylim([0,1]);xlim([min(ntrain),max(ntrain)]);%xlimMin(0);
            %set(gca,'XScale','log');
            xlabel(['number of ' name]);
            ylabel('Informedness');
            out=fullfile(ppath,'figures',['infoovern' name]);
            hold off
            ConvertPlot4Publication(out);
        end
        function adjusterrorbarwidth(h,w)
            if(~exist('w','var')||isempty(w))
                w=0.05;
            end
            w=w*diff(get(gca,'XLim'));
            % adjust error bar width
            hE_c                   = ...
                get(h     , 'Children'    );
            errorbarXData          = ...
                get(hE_c(2), 'XData'       );
            errorbarXData(4:9:end) = ...
                errorbarXData(1:9:end) - w;
            errorbarXData(7:9:end) = ....
                errorbarXData(1:9:end) - w;
            errorbarXData(5:9:end) = ...
                errorbarXData(1:9:end) + w;
            errorbarXData(8:9:end) = ...
                errorbarXData(1:9:end) + w;
            set(hE_c(2), 'XData', errorbarXData);
        end
        
        function fig=classificationerrorovertrees(cumlossTrain,cumlosscCV,cumlossTest)
            fig=figure('Visible', 'off','units','normalized','outerposition',[0 0 1 1]);
            ntrees=1:size(cumlossTrain,1);
            
            n=10;
            n=ceil(size(cumlossTrain,1)/n);
            shown=1:n:size(cumlossTrain,1);
            if shown(end)~=size(cumlossTrain,1)
                shown(end+1)=size(cumlossTrain,1);
            end
            
            hEV     = errorbar(ntrees(shown), mean(cumlosscCV(shown,:),2), std(cumlosscCV(shown,:),1,2));
            set(hEV,'DisplayName','X-val');
            hold on; hold all;
            hET     = errorbar(ntrees(shown), mean(cumlossTrain(shown,:),2), std(cumlossTrain(shown,:),1,2));
            set(hET,'DisplayName','Train');
            if exist('cumlossTest','var')
                hET     = errorbar(ntrees(shown), mean(cumlossTest(shown,:),2), std(cumlossTest(shown,:),1,2));
                set(hET,'DisplayName','Test');
                set(hET                             , ...
                'LineStyle'       , 'none'      , ...
                'Marker'          , '.'         ,...
                'LineWidth'       , 1           , ...
                'Color'           , MyPlots.cTest          ,...
                'Marker'          , 'd'         , ...
                'MarkerSize'      , 6           , ...
                'MarkerEdgeColor' , MyPlots.cTest          , ...
                'MarkerFaceColor' , MyPlots.cTest  ...
                );
            end
            set(hEV                             , ...
                'LineStyle'       , 'none'      , ...
                'Marker'          , '.'         ,...
                'LineWidth'       , 1           , ...
                'Color'           , MyPlots.cCV          ,...
                'Marker'          , 'o'         , ...
                'MarkerSize'      , 6           , ...
                'MarkerEdgeColor' , MyPlots.cCV  , ...
                'MarkerFaceColor' , MyPlots.cCV ...
                );
            
            set(hET                             , ...
                'LineStyle'       , 'none'      , ...
                'Marker'          , '.'         ,...
                'LineWidth'       , 1           , ...
                'Color'           , MyPlots.cTrain          ,...
                'Marker'          , 's'         , ...
                'MarkerSize'      , 6           , ...
                'MarkerEdgeColor' , MyPlots.cTrain          , ...
                'MarkerFaceColor' , MyPlots.cTrain  ...
                );
            
            set(gca,...
                'YMinorTick'  , 'on' ,     ...
                'XMinorTick'  , 'on'  ...,    ...
                ... 'XScale','log'...
                );
            xlimMin(0);ylimMin(0);
            legend('Location','SouthWest');
            xlabel('number of trees');
            ylabel('classification error');
        end
        
        function fig=classificationerrorover(lossT,lossV,indp,indpname)
            fig=figure('Visible', 'off','units','normalized','outerposition',[0 0 1 1]);
            
            shown=1:numel(indp);
            n=size(lossT,2);
            
            hEV     = errorbar(indp(shown), mean(lossV(shown,:),2), std(lossV(shown,:),1,2)/sqrt(n));
            set(hEV,'DisplayName','Validation');
            hold on; hold all;
            hET     = errorbar(indp(shown), mean(lossT(shown,:),2), std(lossT(shown,:),1,2)/sqrt(n));
            set(hET,'DisplayName','Training');
            set(hEV                             , ...
                'LineStyle'       , 'none'      , ...
                'Marker'          , '.'         ,...
                'LineWidth'       , 1           , ...
                'Color'           , MyPlots.cCV          ,...
                'Marker'          , 'o'         , ...
                'MarkerSize'      , 6           , ...
                'MarkerEdgeColor' , MyPlots.cCV  , ...
                'MarkerFaceColor' , MyPlots.cCV ...
                );
            
            set(hET                             , ...
                'LineStyle'       , 'none'      , ...
                'Marker'          , '.'         ,...
                'LineWidth'       , 1           , ...
                'Color'           , MyPlots.cTrain          ,...
                'Marker'          , 's'         , ...
                'MarkerSize'      , 6           , ...
                'MarkerEdgeColor' , MyPlots.cTrain          , ...
                'MarkerFaceColor' , MyPlots.cTrain  ...
                );
            set(gca,...
                'YMinorTick'  , 'on' ,     ...
                'XMinorTick'  , 'on'  ...,    ...
                ... 'XScale','log'...
                );
            xlimMin(0);ylimMin(0);
            legend('Location','SouthWest');
            xlabel(indpname);
            ylabel('classification error');
        end
        
        function fig=roclike(fpr,tpr,xlab,ylab,pos,typ,fig)
            k=5;
            if ~exist('fig','var')
                fig=figure('Visible', 'off','units','normalized','outerposition',[0 0 1 1]);
            end
            n=5;
            [~,idx]=histc(fpr(:,1),(0:n)./n);
            [~,idx2]=histc(tpr(:,1),(0:n)./n);
            shown=[true; diff(idx)~=0].'|[true; diff(idx2)~=0].';
            [h, he]=errorbarxy(fpr(shown,1),tpr(shown,1),fpr(shown,2),fpr(shown,3),tpr(shown,2),tpr(shown,3));
            switch typ
                case 'CV'
                    colo=MyPlots.cCV;
                    name='X-val';
                case 'train'
                    colo=MyPlots.cTrain;
                    name='Train';
                case 'test'
                    colo=MyPlots.cTest;
                    name='Test';
            end
            set(he                             , ...
                'Color'           , colo          ...
                );
            set(h                             , ...
                'LineStyle'       , 'none'      , ...
                'Marker'          , '.'         ,...
                'LineWidth'       , 1           , ...
                'Color'           , colo          ,...
                'Marker'          , 'o'         , ...
                'MarkerSize'      , 6           , ...
                'MarkerEdgeColor' , colo  , ...
                'MarkerFaceColor' , colo ...
                );
            set(h,'DisplayName',name,...
                 'Color'           , colo );
      
%               H=errorbarxy(...);
%         arrayfun(@(d) set(get(get(d,'Annotation'),'LegendInformation'),...
%         'IconDisplayStyle','on'), H(2:end)); % include errorbars
%         hEB=hggroup;
%         set(H(2:end),'Parent',hEB);
%         set(get(get(hEB,'Annotation'),'LegendInformation'),...
%         'IconDisplayStyle','on'); % include errorbars in legend as a group.
%         legend('Main plot', 'Error bars');
            set(gca,...
                'YMinorTick'  , 'on' ,     ...
                'XMinorTick'  , 'on'  ...,    ...
                ... 'XScale','log'...
                );
            legend('Location',pos);
           % legend boxoff ;
            xlabel(xlab);
            ylabel(ylab);
            ylim([0,1]);xlim([0 1]);
        end
        
        function fig=roc(fpr,tpr,varargin)
            fig=MyPlots.roclike(fpr,tpr,'false positve rate','true positve rate','SouthEast',varargin{:});
        end
        
        function fig=precreca(reca,prec,varargin)
            fig=MyPlots.roclike(reca,prec,'recall','precision','NorthEast',varargin{:});            
        end
        function figs=showtraining(bbox,x,l,em,filename)            
            figs=MyPlots.showtrainingpm(bbox,x,l,em,filename,false);
            %figs=MyPlots.showtraining(bbox,x,142,em);MyPlots.simplesave(figs(1),fullfile(ppath,'figures'),'handlabeldvoxelstraingingraw');MyPlots.simplesave(figs(2),fullfile(ppath,'figures'),'handlabeldvoxelstrainging')
        end
        function figs=showtrainingpm(bbox,x,l,em,filename,both)            
            x=x(:,:,l);
            bbox(3,:)=bbox(3,1)+l-1;
            raw=repmat(shiftdimsright(removeSaltAndPepper(single(em.readRoi(bbox)))/255),[3 1 1]);
            y=raw;
            fig1=figure('Visible', 'off','units','normalized','outerposition',[0 0 1 1]);
            imagesc(permute(raw,[2,3,1])),daspecTrain([1 1 1])
            fig2=figure('Visible', 'off','units','normalized','outerposition',[0 0 1 1]);
            cols=1;
            y(1,x==1)=max(y(1,x==1)-cols,0);
            y(2,x==1)=max(y(2,x==1)-cols,0);
            y(3,x==1)=min(y(3,x==1)+cols,1);
            if(both)
                y(1,x==2)=max(y(1,x==2)-cols,0);
                y(2,x==2)=min(y(2,x==2)+cols,1);
                y(3,x==2)=max(y(3,x==2)-cols,0);
            end
            imagesc(permute(y,[2,3,1])),daspecTrain([1 1 1]);
            figs=[fig1,fig2];
            if exist('filename','var')
                imwrite(permute(raw,[2,3,1]),[filename 'raw.png']);
                imwrite(permute(y,[2,3,1]),[filename '.png']);
            end
            %figs=MyPlots.showtraining(bbox,x,142,em);MyPlots.simplesave(figs(1),fullfile(ppath,'figures'),'handlabeldvoxelstraingingraw');MyPlots.simplesave(figs(2),fullfile(ppath,'figures'),'handlabeldvoxelstrainging')
        end
        function simplesave(fig,spath,name)
            saveas(fig, fullfile(spath,[name '.png']));
            saveas(fig, fullfile(spath,[name '.fig']));
        end
    end
    
end

